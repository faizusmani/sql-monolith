---1
SELECT product_id
FROM Products
WHERE low_fats = 'Y'
AND recyclable = 'Y';

---2
SELECT name
FROM Customer
WHERE referee_id <> 2 
OR referee_id IS NULL;

---3
SELECT name, population, area
FROM World
WHERE area >= 3000000
OR population >= 25000000;

---4
SELECT DISTINCT(author_id) AS id
FROM Views
WHERE author_id = viewer_id
ORDER BY id;

---5
SELECT tweet_id 
FROM Tweets
WHERE LENGTH(content) > 15;

---6
SELECT eu.unique_id, name
FROM Employees AS e
LEFT JOIN EmployeeUNI AS eu
ON e.id = eu.id

---7
SELECT p.product_name, s.year, s.price
FROM Sales AS s
INNER JOIN Product AS p
ON s.product_id = p.product_id

---8 
SELECT v.customer_id, COUNT(v.customer_id) AS count_no_trans
FROM Visits AS v
LEFT OUTER JOIN Transactions AS t
ON v.visit_id = t.visit_id
WHERE t.visit_id IS NULL
GROUP BY v.customer_id;

---9
SELECT W2.id
FROM 
Weather AS W1 INNER JOIN Weather AS W2 ON DATE_SUB(W2.recordDate, INTERVAL 1 DAY)=W1.recordDate
WHERE W1.temperature<W2.temperature;

SELECT w1.id
FROM Weather w1, Weather w2
WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1
AND w1.temperature > w2.temperature

SELECT
    w1.id AS id
FROM Weather w1
LEFT JOIN Weather w2
ON w1.recordDate = w2.recordDate + INTERVAL 1 DAY
WHERE w1.temperature > w2.temperature

---10
SELECT a1.machine_id, ROUND(AVG(a2.timestamp - a1.timestamp),3) AS processing_time
FROM Activity a1 INNER JOIN Activity a2
ON a1.machine_id = a2.machine_id and a1.process_id = a2.process_id and a1.activity_type = 'start' and a2.activity_type = 'end'
GROUP BY machine_id;

---11
SELECT e.name, b.bonus
FROM Employee AS e
LEFT JOIN Bonus AS b
ON e.empId = b.empId
WHERE b.bonus < 1000 OR b.bonus IS NULL;

---12
SELECT s.student_id, s.student_name, sb.subject_name, COUNT(e.subject_name) AS attended_exams
FROM Students AS s
CROSS JOIN subjects AS sb
LEFT JOIN Examinations AS e
ON s.student_id = e.student_id AND sb.subject_name = e.subject_name
GROUP BY s.student_id, sb.subject_name
ORDER BY s.student_id, sb.subject_name;

--13
SELECT name
FROM employee
WHERE id IN (SELECT managerId
FROM Employee
GROUP BY managerId
HAVING COUNT(managerId) >=5);

SELECT e.name
FROM Employee AS e 
INNER JOIN Employee AS m ON e.id=m.managerId 
GROUP BY m.managerId 
HAVING COUNT(m.managerId) >= 5

--14
SELECT s.user_id, ROUND(IFNULL(COUNT(CASE c.action WHEN 'confirmed' THEN 1 ELSE NULL END)/COUNT(c.action),0),2)  AS confirmation_rate
FROM Signups AS s
LEFT JOIN Confirmations AS c
ON s.user_id = c.user_id
GROUP BY s.user_id
ORDER BY confirmation_rate;

SELECT s.user_id, ROUND(IFNULL(AVG(action = 'confirmed'),0),2) as confirmation_rate
FROM Signups AS s
LEFT JOIN Confirmations AS c
ON s.user_id = c.user_id
GROUP BY s.user_id
ORDER BY confirmation_rate;

--15
SELECT *
FROM Cinema
WHERE description <> 'boring'
HAVING MOD(id,2) = 1
ORDER BY rating desc;

SELECT *
FROM Cinema
WHERE id % 2 = 1
AND description NOT LIKE '%boring%'
ORDER BY rating desc;

--16
SELECT p.product_id, IFNULL(ROUND(SUM(price*units)/SUM(units),2),0) AS average_price
FROM Prices AS p
LEFT JOIN UnitsSold AS u
ON p.product_id = u.product_id
AND u.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY product_id;

--17
SELECT project_id, AVG(experience_years) AS average_years
FROM Project AS p
INNER JOIN Employee AS e
ON p.employee_id = e.employee_id
GROUP BY project_id

--18
SELECT contest_id, 
ROUND(COUNT(user_id)/(
    SELECT COUNT(user_id)
    FROM Users )*100,2) AS percentage
FROM Register 
GROUP BY contest_id
ORDER BY percentage DESC, contest_id;

--19
SELECT query_name, ROUND(SUM(rating/position)/COUNT(query_name),2) AS quality, ROUND(SUM(CASE WHEN rating<3 THEN 1 ELSE 0 END)/COUNT(query_name)*100,2) AS poor_query_percentage
FROM Queries
WHERE query_name IS NOT NULL
GROUP BY query_name

select
query_name,
round(avg(cast(rating as decimal) / position), 2) as quality,
round(sum(if(rating < 3),1,0) * 100 / count(*), 2) as poor_query_percentage
from
queries
where query_name is not null
group by
query_name;

--20
WITH cte AS (SELECT id, SUBSTRING(trans_date,1,LENGTH(trans_date)-3) AS month
FROM Transactions)
SELECT month, country, COUNT(trans_date) AS trans_count, SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count, SUM(amount) AS trans_total_amount, SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount
FROM cte AS c
INNER JOIN Transactions AS t
ON c.id = t.id
GROUP BY c.month, t.country

SELECT 
    DATE_FORMAT(trans_date, '%Y-%m') as month, 
    country, 
    COUNT(*) as trans_count,
    SUM(IF(state = 'approved', 1, 0)) as approved_count,
    SUM(amount) as trans_total_amount,
    SUM(IF(state = 'approved', amount, 0)) as approved_total_amount
FROM Transactions
GROUP BY YEAR(trans_date), MONTH(trans_date), country

--21
WITH cte AS (SELECT customer_id, (CASE WHEN MIN(order_date) = MIN(customer_pref_delivery_date) THEN 1 ELSE 0 END) AS test
FROM Delivery
GROUP BY customer_id)
SELECT ROUND(SUM(test)/COUNT(test)*100,2) AS immediate_percentage
FROM cte

select round(sum(case when order_date = customer_pref_delivery_date then 1 else 0 end) * 100 / count(distinct customer_id), 2) as immediate_percentage
from Delivery
where (customer_id, order_date) in (
    select customer_id, min(order_date) as first_order_date
    from Delivery
    group by customer_id
)

--22
SELECT
ROUND(COUNT(a2.event_date)/COUNT(*),2) AS fraction
FROM
Activity a1 LEFT JOIN Activity a2
ON a1.player_id=a2.player_id AND DATEDIFF(a2.event_date, a1.event_date) = 1
WHERE (a1.player_id,a1.event_date) IN (SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id);

SELECT ROUND(
    COUNT(player_id) / 
    (SELECT COUNT(DISTINCT player_id) FROM Activity)
, 2) AS fraction 
FROM Activity
WHERE (player_id, event_date) IN (
    SELECT player_id, ADDDATE(MIN(event_date), INTERVAL 1 DAY)
    FROM Activity
    GROUP BY player_id
)